package frequency_1;

import java.util.Arrays;

import frequency_2.SortColors;

//Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
//
//For example, given array S = {-1 2 1 -4}, and target = 1.
//
//The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
//找在数组中找三个元素 要求他们的和 是离target最接近的
//假设一个数组里只有一个solution是离target最近的
//
public class ThreeSumClosest {
public int threeSumClosest(int[] num, int target) {
     if(num==null||num.length<3){
    	 return Integer.MAX_VALUE;
     }  
     Arrays.sort(num); //从大到小排列  这样方便“类binary search”
    int closet=Integer.MAX_VALUE;
    for(int i=0;i<num.length-2;i++){
    	int left=i+1; //左指针
    	int right=num.length-1; //右指针
    	while(left<right){
    		int sum= num[i]+num[left]+num[right];
            if(sum==target){return sum;
            }else if(sum<target){
                left++;
            }else{right--;}
         closest=Math.abs(sum-target)<Math.abs(closest-target)?sum:closest;

    	}
    }
     return closest;
    }
}
