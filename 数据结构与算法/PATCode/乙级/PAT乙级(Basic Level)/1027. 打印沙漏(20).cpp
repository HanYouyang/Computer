//1027. 打印沙漏(20)
本题要求你写个程序把给定的符号打印成沙漏的形状。
例如给定17个“*”，要求按下列格式打印

*****
 ***
  *
 ***
*****
所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；
相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大
顺序递增；首尾符号数相等。

给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏
能用掉尽可能多的符号。

输入格式：

输入在一行给出1个正整数N（<=1000）和一个符号，中间以空格分隔。

输出格式：

首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出
剩下没用掉的符号数。

输入样例：
19 *
输出样例：
*****
 ***
  *
 ***
*****
2

#include <iostream>
using namespace std;
int main() {
    int N;
    cin >> N;
    char c;
    cin >> c;
    //计算行数row，只计算一半的行数，不包括最中间的那个一个符号
    int row = 0;
    for (int i = 1; i < N; i++) {
        if ((2 * i * (i + 2) + 1) > N) {
            row = i - 1;
            break;
        }
    }
    // 打印上半部分
    for (int i = row; i >= 1; i--) {
        for (int k = row - i; k >= 1; k--) {
            cout << " ";
        }
        for (int j = i * 2 + 1; j >= 1; j--) {
            cout << c;
        }
        cout << endl;
    }
    // 打印中间的那个符号
    for (int i = 0; i < row; i++) {
        cout << " ";
    }
    cout << c << endl;
    // 打印下半部分
    for (int i = 1; i <= row; i++) {
        for (int k = row - i; k >= 1; k--) {
            cout << " ";
        }
        for (int j = i * 2 + 1; j >= 1; j--) {
            cout << c;
        }
        cout << endl;
    }
    // 输出还剩下几个符号没有用
        cout << (N - (2 * row * (row + 2) + 1));
    return 0;
}